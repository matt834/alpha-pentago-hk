#include <iostream>

#include "board.h"
#include "bitboard.h"


namespace pen {

namespace {
    std::uint16_t kMoveNum[] = {
        0x100, 0x0, 0x140, 0x40, 0x180, 0x80, 0x1C0, 0xC0,
        0x106, 0x6, 0x146, 0x46, 0x186, 0x86, 0x1C6, 0xC6,
        0x10C, 0xC, 0x14C, 0x4C, 0x18C, 0x8C, 0x1CC, 0xCC,
        0x112, 0x12, 0x152, 0x52, 0x192, 0x92, 0x1D2, 0xD2,
        0x118, 0x18, 0x158, 0x58, 0x198, 0x98, 0x1D8, 0xD8,
        0x11E, 0x1E, 0x15E, 0x5E, 0x19E, 0x9E, 0x1DE, 0xDE,
        0x101, 0x1, 0x141, 0x41, 0x181, 0x81, 0x1C1, 0xC1,
        0x107, 0x7, 0x147, 0x47, 0x187, 0x87, 0x1C7, 0xC7,
        0x10D, 0xD, 0x14D, 0x4D, 0x18D, 0x8D, 0x1CD, 0xCD,
        0x113, 0x13, 0x153, 0x53, 0x193, 0x93, 0x1D3, 0xD3,
        0x119, 0x19, 0x159, 0x59, 0x199, 0x99, 0x1D9, 0xD9,
        0x11F, 0x1F, 0x15F, 0x5F, 0x19F, 0x9F, 0x1DF, 0xDF,
        0x102, 0x2, 0x142, 0x42, 0x182, 0x82, 0x1C2, 0xC2,
        0x108, 0x8, 0x148, 0x48, 0x188, 0x88, 0x1C8, 0xC8,
        0x10E, 0xE, 0x14E, 0x4E, 0x18E, 0x8E, 0x1CE, 0xCE,
        0x114, 0x14, 0x154, 0x54, 0x194, 0x94, 0x1D4, 0xD4,
        0x11A, 0x1A, 0x15A, 0x5A, 0x19A, 0x9A, 0x1DA, 0xDA,
        0x120, 0x20, 0x160, 0x60, 0x1A0, 0xA0, 0x1E0, 0xE0,
        0x103, 0x3, 0x143, 0x43, 0x183, 0x83, 0x1C3, 0xC3,
        0x109, 0x9, 0x149, 0x49, 0x189, 0x89, 0x1C9, 0xC9,
        0x10F, 0xF, 0x14F, 0x4F, 0x18F, 0x8F, 0x1CF, 0xCF,
        0x115, 0x15, 0x155, 0x55, 0x195, 0x95, 0x1D5, 0xD5,
        0x11B, 0x1B, 0x15B, 0x5B, 0x19B, 0x9B, 0x1DB, 0xDB,
        0x121, 0x21, 0x161, 0x61, 0x1A1, 0xA1, 0x1E1, 0xE1,
        0x104, 0x4, 0x144, 0x44, 0x184, 0x84, 0x1C4, 0xC4,
        0x10A, 0xA, 0x14A, 0x4A, 0x18A, 0x8A, 0x1CA, 0xCA,
        0x110, 0x10, 0x150, 0x50, 0x190, 0x90, 0x1D0, 0xD0,
        0x116, 0x16, 0x156, 0x56, 0x196, 0x96, 0x1D6, 0xD6,
        0x11C, 0x1C, 0x15C, 0x5C, 0x19C, 0x9C, 0x1DC, 0xDC,
        0x122, 0x22, 0x162, 0x62, 0x1A2, 0xA2, 0x1E2, 0xE2,
        0x105, 0x5, 0x145, 0x45, 0x185, 0x85, 0x1C5, 0xC5,
        0x10B, 0xB, 0x14B, 0x4B, 0x18B, 0x8B, 0x1CB, 0xCB,
        0x111, 0x11, 0x151, 0x51, 0x191, 0x91, 0x1D1, 0xD1,
        0x117, 0x17, 0x157, 0x57, 0x197, 0x97, 0x1D7, 0xD7,
        0x11D, 0x1D, 0x15D, 0x5D, 0x19D, 0x9D, 0x1DD, 0xDD,
        0x123, 0x23, 0x163, 0x63, 0x1A3, 0xA3, 0x1E3, 0xE3
    };
}

MoveList PentagoBoard::GenerateLegalMoves() const {
    MoveList result;
    result.reserve(288);

    BitBoard ourPieces = our_pieces();

    int i = 0;
    while (i < 288) {
        Move move = Move(kMoveNum[i]);

        if (our_pieces().get(move.node()) || their_pieces().get(move.node())) {
            i += 8;
            continue;
        }

        bool nodePlaced = false;
        bool nodeOnRotatedSquare = false;
        int j = 0;


        while (j < 8) {
            Move nodeMove = Move(kMoveNum[i+j]);

            if (!nodeOnRotatedSquare && nodeMove.nodeOnSquare()) {
                nodeOnRotatedSquare = true;
                ourPieces.set(nodeMove.node());
            }

            BoardSquare ourSquare = BoardSquare(ourPieces, nodeMove.squarePos());
            BoardSquare theirSquare = BoardSquare(their_pieces(), nodeMove.squarePos());

            if (!(ourSquare.IsSymmetrical() && theirSquare.IsSymmetrical())) {
                nodePlaced = true;
                result.emplace_back(nodeMove);
                result.emplace_back(Move(kMoveNum[i+j+1]));
            }

            if (nodeOnRotatedSquare) {
                ourPieces.reset(nodeMove.node());
            }

            j += 2;
        }

        if (!nodePlaced) {
            result.emplace_back(move);
        }
        i += 8;
    }
    return result;
}

}

int main(void) {
    pen::PentagoBoard pboard = pen::PentagoBoard();

    for( pen::Move move : pboard.GenerateLegalMoves() ) {
        std::cout << move.as_string() << std::endl;
    }

    return 0;
}
