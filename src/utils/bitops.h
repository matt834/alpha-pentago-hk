#pragma once

#include <cstdint>

namespace pentago {

static const std::uint64_t BitReverseTable256[] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0,
    0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04, 0x84, 0x44, 0xC4,
    0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC,
    0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA,
    0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6,
    0x36, 0xB6, 0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
    0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9,
    0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 0x0D, 0x8D, 0x4D, 0xCD,
    0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3,
    0x33, 0xB3, 0x73, 0xF3, 0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7,
    0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF,
    0x3F, 0xBF, 0x7F, 0xFF};

static const std::uint64_t RotateRow90Table[] = {
    0x00000000ULL, 0x40000000ULL, 0x01000000ULL, 0x41000000ULL, 0x00040000ULL,
    0x40040000ULL, 0x01040000ULL, 0x41040000ULL, 0x00001000ULL, 0x40001000ULL,
    0x01001000ULL, 0x41001000ULL, 0x00041000ULL, 0x40041000ULL, 0x01041000ULL,
    0x41041000ULL, 0x00000040ULL, 0x40000040ULL, 0x01000040ULL, 0x41000040ULL,
    0x00040040ULL, 0x40040040ULL, 0x01040040ULL, 0x41040040ULL, 0x00001040ULL,
    0x40001040ULL, 0x01001040ULL, 0x41001040ULL, 0x00041040ULL, 0x40041040ULL,
    0x01041040ULL, 0x41041040ULL, 0x00000001ULL, 0x40000001ULL, 0x01000001ULL,
    0x41000001ULL, 0x00040001ULL, 0x40040001ULL, 0x01040001ULL, 0x41040001ULL,
    0x00001001ULL, 0x40001001ULL, 0x01001001ULL, 0x41001001ULL, 0x00041001ULL,
    0x40041001ULL, 0x01041001ULL, 0x41041001ULL, 0x00000041ULL, 0x40000041ULL,
    0x01000041ULL, 0x41000041ULL, 0x00040041ULL, 0x40040041ULL, 0x01040041ULL,
    0x41040041ULL, 0x00001041ULL, 0x40001041ULL, 0x01001041ULL, 0x41001041ULL,
    0x00041041ULL, 0x40041041ULL, 0x01041041ULL, 0x41041041ULL};

static const std::uint64_t RotateRow270Table[] = {
    0x00000000ULL, 0x00000001ULL, 0x00000040ULL, 0x00000041ULL, 0x00001000ULL,
    0x00001001ULL, 0x00001040ULL, 0x00001041ULL, 0x00040000ULL, 0x00040001ULL,
    0x00040040ULL, 0x00040041ULL, 0x00041000ULL, 0x00041001ULL, 0x00041040ULL,
    0x00041041ULL, 0x01000000ULL, 0x01000001ULL, 0x01000040ULL, 0x01000041ULL,
    0x01001000ULL, 0x01001001ULL, 0x01001040ULL, 0x01001041ULL, 0x01040000ULL,
    0x01040001ULL, 0x01040040ULL, 0x01040041ULL, 0x01041000ULL, 0x01041001ULL,
    0x01041040ULL, 0x01041041ULL, 0x40000000ULL, 0x40000001ULL, 0x40000040ULL,
    0x40000041ULL, 0x40001000ULL, 0x40001001ULL, 0x40001040ULL, 0x40001041ULL,
    0x40040000ULL, 0x40040001ULL, 0x40040040ULL, 0x40040041ULL, 0x40041000ULL,
    0x40041001ULL, 0x40041040ULL, 0x40041041ULL, 0x41000000ULL, 0x41000001ULL,
    0x41000040ULL, 0x41000041ULL, 0x41001000ULL, 0x41001001ULL, 0x41001040ULL,
    0x41001041ULL, 0x41040000ULL, 0x41040001ULL, 0x41040040ULL, 0x41040041ULL,
    0x41041000ULL, 0x41041001ULL, 0x41041040ULL, 0x41041041ULL,
};

static const int count(const std::uint64_t board_) {
#if defined(NO_POPCNT)
  std::uint64_t x = board_;
  x -= (x >> 1) & 0x5555555555555555;
  x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333);
  x = (x + (x >> 4)) & 0x0F0F0F0F0F0F0F0F;
  return (x * 0x0101010101010101) >> 56;
#elif defined(_MSC_VER) && defined(_WIN64)
  return _mm_popcnt_u64(board_);
#elif defined(_MSC_VER)
  return __popcnt(board_) + __popcnt(board_ >> 32);
#else
  return __builtin_popcountll(board_);
#endif
}

static const int count_few(const std::uint64_t board_) {
#if defined(NO_POPCNT)
  std::uint64_t x = board_;
  int count;
  for (count = 0; x != 0; ++count) {
    // Clear the rightmost set bit.
    x &= x - 1;
  }
  return count;
#else
  return count(board_);
#endif
}

static const std::uint64_t rotate90(const std::uint64_t board_) {
  const std::uint64_t kRowMask = 0b111111;

  return (RotateRow90Table[(board_ & kRowMask)] |
          (RotateRow90Table[((board_ >> 6) & kRowMask)] << 1) |
          (RotateRow90Table[((board_ >> 12) & kRowMask)] << 2) |
          (RotateRow90Table[((board_ >> 18) & kRowMask)] << 3) |
          (RotateRow90Table[((board_ >> 24) & kRowMask)] << 4) |
          (RotateRow90Table[((board_ >> 30) & kRowMask)] << 5));
}

static const std::uint64_t rotate180(const std::uint64_t board_) {
  return ((BitReverseTable256[board_ & 0xFF] << 56) |
          (BitReverseTable256[(board_ >> 8) & 0xFF] << 48) |
          (BitReverseTable256[(board_ >> 16) & 0xFF] << 40) |
          (BitReverseTable256[(board_ >> 24) & 0xFF] << 32) |
          (BitReverseTable256[(board_ >> 32) & 0xFF] << 24) |
          (BitReverseTable256[(board_ >> 40) & 0xFF] << 16)) >>
         28;
}

static const std::uint64_t rotate270(const std::uint64_t board_) {
  const std::uint64_t kRowMask = 0b111111;

  return ((RotateRow270Table[(board_ & kRowMask)] << 5) |
          (RotateRow270Table[((board_ >> 6) & kRowMask)] << 4) |
          (RotateRow270Table[((board_ >> 12) & kRowMask)] << 3) |
          (RotateRow270Table[((board_ >> 18) & kRowMask)] << 2) |
          (RotateRow270Table[((board_ >> 24) & kRowMask)] << 1) |
          RotateRow270Table[((board_ >> 30) & kRowMask)]);
}

static const std::uint64_t mirror(const std::uint64_t board_) {
  const std::uint64_t kRowMask = 0b111111;

  return ((board_ & kRowMask) << 30) | ((board_ & (kRowMask << 6)) << 18) |
         ((board_ & (kRowMask << 12)) << 6) |
         ((board_ & (kRowMask << 18)) >> 6) |
         ((board_ & (kRowMask << 24)) >> 18) |
         ((board_ & (kRowMask << 30)) >> 30);
}

}  // namespace pentago
